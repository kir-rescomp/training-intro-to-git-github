{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\u2190 Return to KIR Training Catalogue <p> \ud83d\udea7     Work in Progress   </p> <p>This repository is under active development.Expected completion: 12th of November 2025</p> <p> </p>"},{"location":"resources/cheat-sheet/","title":"Git &amp; GitHub Cheat Sheet \ud83d\udccb","text":""},{"location":"resources/cheat-sheet/#git-github-cheat-sheet","title":"Git &amp; GitHub Cheat Sheet \ud83d\udccb","text":"<p>Quick reference for the most common Git and GitHub commands.</p>"},{"location":"resources/cheat-sheet/#setup-configuration","title":"Setup &amp; Configuration","text":""},{"location":"resources/cheat-sheet/#initial-setup","title":"Initial Setup","text":"<pre><code># Set your identity\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n\n# Set default branch name\ngit config --global init.defaultBranch main\n\n# Set default editor\ngit config --global core.editor \"code --wait\"  # VS Code\ngit config --global core.editor \"nano\"         # Nano\n\n# View all settings\ngit config --list\n\n# View specific setting\ngit config user.name\n</code></pre>"},{"location":"resources/cheat-sheet/#aliases-shortcuts","title":"Aliases (Shortcuts)","text":"<pre><code># Create shortcuts for common commands\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.unstage 'reset HEAD --'\n\n# Now you can use:\ngit st    # instead of git status\ngit co    # instead of git checkout\n</code></pre>"},{"location":"resources/cheat-sheet/#creating-repositories","title":"Creating Repositories","text":"New Local RepositoryClone Existing Repository <pre><code># Create a new directory\nmkdir my-project\ncd my-project\n\n# Initialize Git\ngit init\n</code></pre> <pre><code># Clone via HTTPS\ngit clone https://github.com/user/repo.git\n\n# Clone via SSH\ngit clone git@github.com:user/repo.git\n\n# Clone to specific folder\ngit clone https://github.com/user/repo.git my-folder\n\n# Clone specific branch\ngit clone -b develop https://github.com/user/repo.git\n</code></pre>"},{"location":"resources/cheat-sheet/#basic-workflow","title":"Basic Workflow","text":""},{"location":"resources/cheat-sheet/#checking-status","title":"Checking Status","text":"<pre><code># Show working tree status\ngit status\n\n# Short format\ngit status -s\n\n# Show branch and tracking info\ngit status -sb\n</code></pre>"},{"location":"resources/cheat-sheet/#staging-changes","title":"Staging Changes","text":"<pre><code># Stage specific file\ngit add filename.txt\n\n# Stage all changes in current directory\ngit add .\n\n# Stage all changes in repository\ngit add -A\n\n# Stage by pattern\ngit add *.js\n\n# Interactive staging\ngit add -p\n\n# Remove from staging (unstage)\ngit reset filename.txt\n</code></pre>"},{"location":"resources/cheat-sheet/#committing","title":"Committing","text":"<pre><code># Commit staged changes\ngit commit -m \"Your commit message\"\n\n# Commit with detailed message\ngit commit -m \"Title\" -m \"Description\"\n\n# Stage and commit tracked files\ngit commit -am \"Message\"\n\n# Amend last commit\ngit commit --amend -m \"New message\"\n\n# Commit with specific date\ngit commit --date=\"2025-01-01 12:00:00\" -m \"Message\"\n</code></pre>"},{"location":"resources/cheat-sheet/#viewing-history","title":"Viewing History","text":"<pre><code># View commit history\ngit log\n\n# One line per commit\ngit log --oneline\n\n# Show last N commits\ngit log -n 5\n\n# Show with graph\ngit log --graph --oneline --all\n\n# Show with files changed\ngit log --stat\n\n# Show with actual changes\ngit log -p\n\n# Show commits by author\ngit log --author=\"John\"\n\n# Show commits since date\ngit log --since=\"2025-01-01\"\n\n# Show commits for specific file\ngit log -- filename.txt\n\n# Pretty format\ngit log --pretty=format:\"%h - %an, %ar : %s\"\n</code></pre>"},{"location":"resources/cheat-sheet/#branching","title":"Branching","text":""},{"location":"resources/cheat-sheet/#creating-switching-branches","title":"Creating &amp; Switching Branches","text":"<pre><code># List all branches\ngit branch\n\n# List all branches (including remote)\ngit branch -a\n\n# Create new branch\ngit branch feature-name\n\n# Switch to branch\ngit checkout feature-name\n\n# Create and switch to new branch\ngit checkout -b feature-name\n\n# Create branch from specific commit\ngit branch feature-name abc123\n\n# Switch to previous branch\ngit checkout -\n\n# Rename current branch\ngit branch -m new-name\n\n# Delete branch\ngit branch -d feature-name\n\n# Force delete branch\ngit branch -D feature-name\n</code></pre>"},{"location":"resources/cheat-sheet/#merging","title":"Merging","text":"<pre><code># Merge branch into current branch\ngit merge feature-name\n\n# Merge with no fast-forward\ngit merge --no-ff feature-name\n\n# Abort merge\ngit merge --abort\n\n# See merged branches\ngit branch --merged\n\n# See unmerged branches\ngit branch --no-merged\n</code></pre>"},{"location":"resources/cheat-sheet/#remote-repositories","title":"Remote Repositories","text":""},{"location":"resources/cheat-sheet/#managing-remotes","title":"Managing Remotes","text":"<pre><code># List remotes\ngit remote -v\n\n# Add remote\ngit remote add origin https://github.com/user/repo.git\n\n# Change remote URL\ngit remote set-url origin https://github.com/user/repo.git\n\n# Remove remote\ngit remote remove origin\n\n# Rename remote\ngit remote rename origin upstream\n\n# Show remote info\ngit remote show origin\n</code></pre>"},{"location":"resources/cheat-sheet/#fetching-pulling","title":"Fetching &amp; Pulling","text":"<pre><code># Fetch all remotes\ngit fetch --all\n\n# Fetch specific remote\ngit fetch origin\n\n# Fetch and prune deleted branches\ngit fetch --prune\n\n# Pull (fetch + merge)\ngit pull origin main\n\n# Pull with rebase\ngit pull --rebase origin main\n</code></pre>"},{"location":"resources/cheat-sheet/#pushing","title":"Pushing","text":"<pre><code># Push to remote\ngit push origin main\n\n# Push and set upstream\ngit push -u origin main\n\n# Push all branches\ngit push --all origin\n\n# Push tags\ngit push --tags\n\n# Delete remote branch\ngit push origin --delete feature-name\n\n# Force push (dangerous!)\ngit push --force origin main\n\n# Force push (safer)\ngit push --force-with-lease origin main\n</code></pre>"},{"location":"resources/cheat-sheet/#undoing-changes","title":"Undoing Changes","text":""},{"location":"resources/cheat-sheet/#discard-changes","title":"Discard Changes","text":"<pre><code># Discard changes in working directory\ngit checkout -- filename.txt\n\n# Discard all changes\ngit checkout -- .\n\n# Remove untracked files\ngit clean -f\n\n# Remove untracked files and directories\ngit clean -fd\n\n# Preview what will be removed\ngit clean -n\n</code></pre>"},{"location":"resources/cheat-sheet/#unstaging","title":"Unstaging","text":"<pre><code># Unstage file\ngit reset HEAD filename.txt\n\n# Unstage all\ngit reset HEAD\n</code></pre>"},{"location":"resources/cheat-sheet/#reverting-commits","title":"Reverting Commits","text":"<pre><code># Create new commit that undoes changes\ngit revert abc123\n\n# Revert last commit\ngit revert HEAD\n\n# Revert without committing\ngit revert -n abc123\n</code></pre>"},{"location":"resources/cheat-sheet/#resetting","title":"Resetting","text":"<pre><code># Soft reset (keep changes staged)\ngit reset --soft HEAD~1\n\n# Mixed reset (keep changes unstaged)\ngit reset HEAD~1\n\n# Hard reset (discard all changes)\ngit reset --hard HEAD~1\n\n# Reset to specific commit\ngit reset --hard abc123\n\n# Reset specific file\ngit checkout abc123 -- filename.txt\n</code></pre>"},{"location":"resources/cheat-sheet/#stashing","title":"Stashing","text":"<pre><code># Stash changes\ngit stash\n\n# Stash with message\ngit stash save \"Work in progress\"\n\n# List stashes\ngit stash list\n\n# Apply most recent stash\ngit stash apply\n\n# Apply and remove stash\ngit stash pop\n\n# Apply specific stash\ngit stash apply stash@{1}\n\n# Drop specific stash\ngit stash drop stash@{0}\n\n# Clear all stashes\ngit stash clear\n\n# Stash untracked files too\ngit stash -u\n\n# Create branch from stash\ngit stash branch feature-name\n</code></pre>"},{"location":"resources/cheat-sheet/#comparing-diffing","title":"Comparing &amp; Diffing","text":"<pre><code># Show unstaged changes\ngit diff\n\n# Show staged changes\ngit diff --staged\n\n# Show changes between commits\ngit diff abc123 def456\n\n# Show changes for specific file\ngit diff filename.txt\n\n# Show changes between branches\ngit diff main feature-branch\n\n# Show summary of changes\ngit diff --stat\n\n# Show word-by-word changes\ngit diff --word-diff\n</code></pre>"},{"location":"resources/cheat-sheet/#tags","title":"Tags","text":"<pre><code># List tags\ngit tag\n\n# Create lightweight tag\ngit tag v1.0.0\n\n# Create annotated tag\ngit tag -a v1.0.0 -m \"Version 1.0.0\"\n\n# Tag specific commit\ngit tag v1.0.0 abc123\n\n# Show tag info\ngit show v1.0.0\n\n# Push tag to remote\ngit push origin v1.0.0\n\n# Push all tags\ngit push --tags\n\n# Delete local tag\ngit tag -d v1.0.0\n\n# Delete remote tag\ngit push origin --delete v1.0.0\n\n# Checkout tag\ngit checkout v1.0.0\n</code></pre>"},{"location":"resources/cheat-sheet/#advanced-commands","title":"Advanced Commands","text":""},{"location":"resources/cheat-sheet/#rebasing","title":"Rebasing","text":"<pre><code># Rebase current branch onto main\ngit rebase main\n\n# Interactive rebase (last 3 commits)\ngit rebase -i HEAD~3\n\n# Continue rebase after resolving conflicts\ngit rebase --continue\n\n# Skip current commit\ngit rebase --skip\n\n# Abort rebase\ngit rebase --abort\n</code></pre>"},{"location":"resources/cheat-sheet/#cherry-picking","title":"Cherry-Picking","text":"<pre><code># Apply specific commit to current branch\ngit cherry-pick abc123\n\n# Cherry-pick without committing\ngit cherry-pick -n abc123\n\n# Cherry-pick range of commits\ngit cherry-pick abc123..def456\n</code></pre>"},{"location":"resources/cheat-sheet/#searching","title":"Searching","text":"<pre><code># Search in working directory\ngit grep \"search term\"\n\n# Search in specific branch\ngit grep \"search term\" branch-name\n\n# Show line numbers\ngit grep -n \"search term\"\n\n# Search in commit history\ngit log -S \"search term\"\n\n# Find commits that added/removed a string\ngit log -G \"search term\"\n</code></pre>"},{"location":"resources/cheat-sheet/#bisect-find-bug","title":"Bisect (Find Bug)","text":"<pre><code># Start bisecting\ngit bisect start\n\n# Mark current as bad\ngit bisect bad\n\n# Mark commit as good\ngit bisect good abc123\n\n# Git will checkout middle commit\n# Test it, then mark as good or bad\ngit bisect good  # or git bisect bad\n\n# When found, reset\ngit bisect reset\n</code></pre>"},{"location":"resources/cheat-sheet/#github-specific","title":"GitHub-Specific","text":""},{"location":"resources/cheat-sheet/#pull-requests","title":"Pull Requests","text":"<pre><code># Create PR from command line (using GitHub CLI)\ngh pr create --title \"Feature\" --body \"Description\"\n\n# List PRs\ngh pr list\n\n# Check out a PR\ngh pr checkout 123\n\n# Merge PR\ngh pr merge 123\n\n# View PR in browser\ngh pr view 123 --web\n</code></pre>"},{"location":"resources/cheat-sheet/#issues","title":"Issues","text":"<pre><code># Create issue\ngh issue create --title \"Bug\" --body \"Description\"\n\n# List issues\ngh issue list\n\n# Close issue\ngh issue close 123\n\n# View issue\ngh issue view 123\n</code></pre>"},{"location":"resources/cheat-sheet/#useful-combinations","title":"Useful Combinations","text":"<pre><code># View files changed in last commit\ngit show --name-only HEAD\n\n# List files in commit\ngit diff-tree --no-commit-id --name-only -r abc123\n\n# Count commits by author\ngit shortlog -sn\n\n# Find who modified a line\ngit blame filename.txt\n\n# Show commit that introduced a change\ngit log --follow -- filename.txt\n\n# Create archive of repository\ngit archive --format=zip HEAD &gt; project.zip\n\n# Export repository without .git\ngit clone --depth 1 &lt;url&gt; folder &amp;&amp; rm -rf folder/.git\n\n# Temporarily ignore file\ngit update-index --assume-unchanged filename.txt\n\n# Stop ignoring file\ngit update-index --no-assume-unchanged filename.txt\n</code></pre>"},{"location":"resources/cheat-sheet/#gitignore-patterns","title":".gitignore Patterns","text":"<pre><code># Ignore specific file\nconfig.ini\n\n# Ignore all files with extension\n*.log\n\n# Ignore directory\nnode_modules/\n\n# Ignore all .txt files in specific directory\nlogs/*.txt\n\n# But don't ignore this file\n!important.txt\n\n# Ignore files only in root\n/build\n\n# Ignore all .js files in any directory named \"temp\"\n**/temp/*.js\n</code></pre>"},{"location":"resources/cheat-sheet/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Fix \"detached HEAD\"\ngit checkout main\n\n# Recover deleted branch\ngit reflog\ngit checkout -b recovered-branch abc123\n\n# Find lost commits\ngit reflog\ngit cherry-pick abc123\n\n# Fix wrong commit message\ngit commit --amend -m \"Correct message\"\n\n# Undo last commit but keep changes\ngit reset --soft HEAD~1\n\n# Sync fork with upstream\ngit remote add upstream &lt;url&gt;\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\ngit push origin main\n\n# Remove file from Git but keep locally\ngit rm --cached filename.txt\n\n# Rename file (Git tracks rename)\ngit mv old-name.txt new-name.txt\n</code></pre>"},{"location":"resources/cheat-sheet/#performance-maintenance","title":"Performance &amp; Maintenance","text":"<pre><code># Optimize repository\ngit gc\n\n# Verify integrity\ngit fsck\n\n# Show repository size\ngit count-objects -vH\n\n# Prune unreachable objects\ngit prune\n\n# Remove all untracked files and directories\ngit clean -fdx\n</code></pre>"},{"location":"resources/cheat-sheet/#quick-reference-card","title":"Quick Reference Card","text":"Operation Command Initialize <code>git init</code> Clone <code>git clone &lt;url&gt;</code> Status <code>git status</code> Stage <code>git add &lt;file&gt;</code> Commit <code>git commit -m \"message\"</code> Push <code>git push origin main</code> Pull <code>git pull origin main</code> Branch <code>git checkout -b &lt;name&gt;</code> Merge <code>git merge &lt;branch&gt;</code> Stash <code>git stash</code> Log <code>git log --oneline</code> Diff <code>git diff</code> Reset <code>git reset HEAD~1</code> Revert <code>git revert &lt;commit&gt;</code>"},{"location":"resources/cheat-sheet/#visual-git-cheatsheet","title":"Visual Git Cheatsheet","text":"<pre><code>graph TD\n    A[Working Directory] --&gt;|git add| B[Staging Area]\n    B --&gt;|git commit| C[Local Repository]\n    C --&gt;|git push| D[Remote Repository]\n    D --&gt;|git pull| A\n    C --&gt;|git checkout| A\n    D --&gt;|git fetch| C</code></pre> <p>Pro Tip</p> <p>Save this cheat sheet as a PDF or bookmark this page for quick reference during your daily work!</p> <p>\u2190 Back to Resources Download PDF Version</p>"},{"location":"resources/command-generator/","title":"Git Command Generator \ud83c\udfaf","text":""},{"location":"resources/command-generator/#git-command-generator","title":"Git Command Generator \ud83c\udfaf","text":"<p>Never memorize Git commands again! Use this interactive tool to find the exact command you need.</p>"},{"location":"resources/command-generator/#interactive-command-builder","title":"Interactive Command Builder","text":""},{"location":"resources/command-generator/#how-to-use","title":"How to Use","text":"<ol> <li>Select what you want to do - Choose from common Git operations</li> <li>Pick the specific action - Narrow down your exact need</li> <li>Enter any required values - Branch names, file names, etc.</li> <li>Copy and use! - Click the copy button and paste into your terminal</li> </ol>"},{"location":"resources/command-generator/#quick-examples","title":"Quick Examples","text":""},{"location":"resources/command-generator/#example-1-creating-a-feature-branch","title":"Example 1: Creating a Feature Branch","text":"<ol> <li>Select \"Work with branches\"</li> <li>Choose \"Create and switch to new branch\"</li> <li>Enter your branch name: <code>feature/login</code></li> <li>Get: <code>git checkout -b feature/login</code></li> </ol>"},{"location":"resources/command-generator/#example-2-undoing-last-commit","title":"Example 2: Undoing Last Commit","text":"<ol> <li>Select \"Undo changes\"</li> <li>Choose \"Undo last commit, keep changes unstaged\"</li> <li>Get: <code>git reset HEAD~1</code></li> </ol>"},{"location":"resources/command-generator/#example-3-pushing-to-remote","title":"Example 3: Pushing to Remote","text":"<ol> <li>Select \"Push to remote\"</li> <li>Choose \"Push and set upstream\"</li> <li>Enter branch name: <code>main</code></li> <li>Get: <code>git push -u origin main</code></li> </ol>"},{"location":"resources/command-generator/#common-workflows","title":"Common Workflows","text":""},{"location":"resources/command-generator/#feature-development-flow","title":"Feature Development Flow","text":"<pre><code>graph LR\n    A[Create Branch] --&gt; B[Make Changes]\n    B --&gt; C[Stage &amp; Commit]\n    C --&gt; D[Push to Remote]\n    D --&gt; E[Create PR]</code></pre> <p>Commands you'll need: - Create branch: Select \"branch\" \u2192 \"Create and switch\" - Stage changes: Select \"add\" \u2192 \"Stage all changes\" - Commit: Select \"commit\" \u2192 \"Commit with message\" - Push: Select \"push\" \u2192 \"Push and set upstream\"</p>"},{"location":"resources/command-generator/#bug-fix-flow","title":"Bug Fix Flow","text":"<pre><code>graph LR\n    A[Switch to Main] --&gt; B[Pull Latest]\n    B --&gt; C[Create Hotfix Branch]\n    C --&gt; D[Fix &amp; Commit]\n    D --&gt; E[Push &amp; Merge]</code></pre> <p>Commands you'll need: - Switch branch: Select \"checkout\" \u2192 \"Switch to existing branch\" - Pull updates: Select \"pull\" \u2192 \"Pull from remote branch\" - Create branch: Select \"branch\" \u2192 \"Create and switch\"</p>"},{"location":"resources/command-generator/#safety-tips","title":"Safety Tips","text":"<p>Destructive Commands</p> <p>Some commands can't be undone. The tool will warn you when:</p> <ul> <li>Using <code>--force</code> (rewrites history)</li> <li>Using <code>--hard</code> (deletes changes)</li> <li>Clearing stashes (loses saved work)</li> </ul> <p>Always read warnings before executing!</p> <p>Test First</p> <p>Not sure about a command? Try it on a test repository first!</p> <p>Local vs Remote</p> <p>Remember:</p> <ul> <li>Commands run locally by default</li> <li>Use <code>push</code> to send changes to remote</li> <li>Use <code>pull</code> to get changes from remote</li> </ul>"},{"location":"resources/command-generator/#need-more-help","title":"Need More Help?","text":"<ul> <li>\ud83d\udcda Complete Cheat Sheet - All commands with examples</li> <li>\ud83c\udfe0 Workshop Home - Return to overview</li> </ul>"},{"location":"resources/command-generator/#about-this-tool","title":"About This Tool","text":"<p>This interactive command generator helps you:</p> <p>\u2705 Find commands without googling \u2705 Learn proper syntax \u2705 Understand what each command does \u2705 Avoid common mistakes \u2705 Build confidence with Git  </p> <p>Made with \u2764\ufe0f for the Git Workshop</p>"}]}